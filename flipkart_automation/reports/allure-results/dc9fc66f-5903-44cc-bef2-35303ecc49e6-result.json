{"name": "test_order_items_and_verify_cart", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.StaleElementReferenceException: Message: stale element reference: stale element not found in the current frame\n  (Session info: chrome=127.0.6533.122); For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#stale-element-reference-exception\nStacktrace:\n\tGetHandleVerifier [0x00AC8923+23283]\n\t(No symbol) [0x00A8E934]\n\t(No symbol) [0x009C0733]\n\t(No symbol) [0x009C60DF]\n\t(No symbol) [0x009C7D0F]\n\t(No symbol) [0x00A3D74B]\n\t(No symbol) [0x00A2441C]\n\t(No symbol) [0x00A3CB8D]\n\t(No symbol) [0x00A241B6]\n\t(No symbol) [0x009F8017]\n\t(No symbol) [0x009F890D]\n\tGetHandleVerifier [0x00BBA5F3+1013699]\n\tGetHandleVerifier [0x00BC3E4C+1052700]\n\tGetHandleVerifier [0x00BBD4B4+1025668]\n\tGetHandleVerifier [0x00AEEA2B+179195]\n\t(No symbol) [0x00A96833]\n\t(No symbol) [0x00A93198]\n\t(No symbol) [0x00A93337]\n\t(No symbol) [0x00A8B4BE]\n\tBaseThreadInitThunk [0x75757BA9+25]\n\tRtlInitializeExceptionChain [0x7737C11B+107]\n\tRtlClearBits [0x7737C09F+191]", "trace": "fixturefunc = <function check_availability_and_add at 0x000001E74B58D240>\nrequest = <FixtureRequest for <Function test_order_items_and_verify_cart>>\nkwargs = {'browser': <selenium.webdriver.chrome.webdriver.WebDriver (session=\"dd4c6db07fdb9db3cd4971ca3cffac75\")>}\n\n    def call_fixture_func(\n        fixturefunc: _FixtureFunc[FixtureValue], request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n.venv\\lib\\site-packages\\_pytest\\fixtures.py:898: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nfeatures\\tests\\test_item_ordering.py:46: in check_availability_and_add\n    item_page.check_availability_and_add_to_cart(test_data['pin_code'])\nfeatures\\pages\\item_page.py:20: in check_availability_and_add_to_cart\n    self.driver.execute_script(\"arguments[0].scrollIntoView(true);\", self.driver.find_element(By.XPATH, \"//div[contains(text(),'Safe and Secure Payments.')]\"))\n.venv\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:414: in execute_script\n    return self.execute(command, {\"script\": script, \"args\": converted_args})[\"value\"]\n.venv\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:354: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000001E74B587DF0>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"stale element reference\",\"message\":\"stale element reference: stale elemen...dInitThunk [0x75757BA9+25]\\\\n\\\\tRtlInitializeExceptionChain [0x7737C11B+107]\\\\n\\\\tRtlClearBits [0x7737C09F+191]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.StaleElementReferenceException: Message: stale element reference: stale element not found in the current frame\nE         (Session info: chrome=127.0.6533.122); For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#stale-element-reference-exception\nE       Stacktrace:\nE       \tGetHandleVerifier [0x00AC8923+23283]\nE       \t(No symbol) [0x00A8E934]\nE       \t(No symbol) [0x009C0733]\nE       \t(No symbol) [0x009C60DF]\nE       \t(No symbol) [0x009C7D0F]\nE       \t(No symbol) [0x00A3D74B]\nE       \t(No symbol) [0x00A2441C]\nE       \t(No symbol) [0x00A3CB8D]\nE       \t(No symbol) [0x00A241B6]\nE       \t(No symbol) [0x009F8017]\nE       \t(No symbol) [0x009F890D]\nE       \tGetHandleVerifier [0x00BBA5F3+1013699]\nE       \tGetHandleVerifier [0x00BC3E4C+1052700]\nE       \tGetHandleVerifier [0x00BBD4B4+1025668]\nE       \tGetHandleVerifier [0x00AEEA2B+179195]\nE       \t(No symbol) [0x00A96833]\nE       \t(No symbol) [0x00A93198]\nE       \t(No symbol) [0x00A93337]\nE       \t(No symbol) [0x00A8B4BE]\nE       \tBaseThreadInitThunk [0x75757BA9+25]\nE       \tRtlInitializeExceptionChain [0x7737C11B+107]\nE       \tRtlClearBits [0x7737C09F+191]\n\n.venv\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:229: StaleElementReferenceException"}, "description": "C:\\Users\\ac57486\\OneDrive - Lumen\\Pictures\\MyFolder\\BDD\\flipkart_automation\\features\\item_ordering.feature: Order items and verify cart", "start": 1727186886729, "stop": 1727186909358, "uuid": "dba1d36b-faaf-4722-8598-f6535d5463f8", "historyId": "39b8b8a2b3246a44eb6d98554318efa3", "testCaseId": "39b8b8a2b3246a44eb6d98554318efa3", "fullName": "features.tests.test_item_ordering#test_order_items_and_verify_cart", "labels": [{"name": "tag", "value": "@pytest.mark.usefixtures"}, {"name": "parentSuite", "value": "features.tests"}, {"name": "suite", "value": "test_item_ordering"}, {"name": "host", "value": "IND-5CG0259CKD"}, {"name": "thread", "value": "12800-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "features.tests.test_item_ordering"}]}